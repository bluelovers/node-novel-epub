#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const path = require("path");
const index_1 = require("../index");
const updateNotifier = require("update-notifier");
const PACKAGE_JSON = require("../package.json");
const debug_color2_1 = require("debug-color2");
const console = new debug_color2_1.Console(null, {
    enabled: true,
    inspectOptions: {
        colors: true,
    },
    chalkOptions: {
        enabled: true,
    },
});
console.enabledColor = true;
const CWD = process.cwd();
updateNotifier({
    pkg: PACKAGE_JSON,
}).notify();
let cli = yargs
    .default({
//input: process.cwd(),
})
    .option('input', {
    alias: ['i'],
    //demandOption: true,
    requiresArg: true,
    normalize: true,
    type: 'string',
    desc: 'source novel txt folder path',
})
    .option('output', {
    alias: ['o'],
    //demandOption: true,
    requiresArg: true,
    normalize: true,
    type: 'string',
    desc: ' output path',
    default: function () {
        return CWD;
    },
})
    .option('tpl', {
    alias: ['t'],
    requiresArg: true,
    type: 'string',
    desc: 'epub tpl',
})
    .option('filename', {
    alias: ['f'],
    requiresArg: true,
    type: 'string',
    desc: 'filename',
})
    .option('useTitle', {
    requiresArg: true,
    default: true,
})
    .option('filenameLocal', {
    requiresArg: true,
    desc: 'try auto choose filename',
    default: true,
})
    .option('date', {
    boolean: true,
    alias: ['d'],
    desc: 'add current date end of filename',
})
    .option('lang', {
    alias: ['l'],
    type: 'string',
    desc: 'epub lang',
})
    // @ts-ignore
    .command('$0', '', function (yargs) {
    let inputPath = yargs.argv.input || yargs.argv._[0] || CWD;
    let outputPath = yargs.argv.output;
    if (!path.isAbsolute(inputPath)) {
        inputPath = path.join(CWD, inputPath);
    }
    if (!path.isAbsolute(outputPath)) {
        outputPath = path.join(CWD, outputPath);
    }
    console.grey(`currentPath:\n  `, inputPath);
    console.grey(`inputPath:\n  `, inputPath);
    console.grey(`outputPath:\n  `, outputPath);
    if (inputPath.indexOf(__dirname) == 0 || outputPath.indexOf(__dirname) == 0) {
        console.error(`[FAIL] path not allow`);
        yargs.showHelp();
        process.exit(1);
        return;
    }
    console.log(`\n`);
    //console.log(666, yargs.argv);
    return index_1.default({
        inputPath,
        outputPath,
        filename: yargs.argv.filename || null,
        useTitle: yargs.argv.useTitle,
        filenameLocal: yargs.argv.filenameLocal,
        epubLanguage: yargs.argv.lang,
        epubTemplate: yargs.argv.tpl,
        padEndDate: yargs.argv.date,
    });
    //yargs.showHelp('log');
})
    .version()
    //.help()
    .argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm92ZWwtZXB1Yi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5vdmVsLWVwdWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBTUEsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUU3QixvQ0FBaUM7QUFDakMsa0RBQW1EO0FBQ25ELGdEQUFpRDtBQUNqRCwrQ0FBdUM7QUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxzQkFBTyxDQUFDLElBQUksRUFBRTtJQUNqQyxPQUFPLEVBQUUsSUFBSTtJQUNiLGNBQWMsRUFBRTtRQUNmLE1BQU0sRUFBRSxJQUFJO0tBQ1o7SUFDRCxZQUFZLEVBQUU7UUFDYixPQUFPLEVBQUUsSUFBSTtLQUNiO0NBQ0QsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7QUFFNUIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLGNBQWMsQ0FBQztJQUNkLEdBQUcsRUFBRSxZQUFZO0NBQ2pCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVaLElBQUksR0FBRyxHQUFHLEtBQUs7S0FDYixPQUFPLENBQUM7QUFDUix1QkFBdUI7Q0FDdkIsQ0FBQztLQUNELE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDaEIsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ1oscUJBQXFCO0lBQ3JCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsOEJBQThCO0NBT3BDLENBQUM7S0FDRCxNQUFNLENBQUMsUUFBUSxFQUFFO0lBQ2pCLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNaLHFCQUFxQjtJQUNyQixXQUFXLEVBQUUsSUFBSTtJQUNqQixTQUFTLEVBQUUsSUFBSTtJQUNmLElBQUksRUFBRSxRQUFRO0lBQ2QsSUFBSSxFQUFFLGNBQWM7SUFDcEIsT0FBTyxFQUFFO1FBRVIsT0FBTyxHQUFH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QUMsSUFBSSxDQUFDLEdBQUc7UUFDNUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSTtLQUMzQixDQUFDLENBQUM7SUFFSCx3QkFBd0I7QUFDekIsQ0FBQyxDQUFDO0tBQ0QsT0FBTyxFQUFFO0lBQ1YsU0FBUztLQUNSLElBQUksQ0FDTCIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8yLzE4LzAxOC5cbiAqL1xuXG5pbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgbm92ZWxFcHViIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB1cGRhdGVOb3RpZmllciA9IHJlcXVpcmUoJ3VwZGF0ZS1ub3RpZmllcicpO1xuaW1wb3J0IFBBQ0tBR0VfSlNPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5jb25zdCBjb25zb2xlID0gbmV3IENvbnNvbGUobnVsbCwge1xuXHRlbmFibGVkOiB0cnVlLFxuXHRpbnNwZWN0T3B0aW9uczoge1xuXHRcdGNvbG9yczogdHJ1ZSxcblx0fSxcblx0Y2hhbGtPcHRpb25zOiB7XG5cdFx0ZW5hYmxlZDogdHJ1ZSxcblx0fSxcbn0pO1xuXG5jb25zb2xlLmVuYWJsZWRDb2xvciA9IHRydWU7XG5cbmNvbnN0IENXRCA9IHByb2Nlc3MuY3dkKCk7XG5cbnVwZGF0ZU5vdGlmaWVyKHtcblx0cGtnOiBQQUNLQUdFX0pTT04sXG59KS5ub3RpZnkoKTtcblxubGV0IGNsaSA9IHlhcmdzXG5cdC5kZWZhdWx0KHtcblx0XHQvL2lucHV0OiBwcm9jZXNzLmN3ZCgpLFxuXHR9KVxuXHQub3B0aW9uKCdpbnB1dCcsIHtcblx0XHRhbGlhczogWydpJ10sXG5cdFx0Ly9kZW1hbmRPcHRpb246IHRydWUsXG5cdFx0cmVxdWlyZXNBcmc6IHRydWUsXG5cdFx0bm9ybWFsaXplOiB0cnVlLFxuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdGRlc2M6ICdzb3VyY2Ugbm92ZWwgdHh0IGZvbGRlciBwYXRoJyxcblx0XHQvKlxuXHRcdGRlZmF1bHQ6IGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0Ly9yZXR1cm4gcHJvY2Vzcy5jd2QoKTtcblx0XHR9LFxuXHRcdCovXG5cdH0pXG5cdC5vcHRpb24oJ291dHB1dCcsIHtcblx0XHRhbGlhczogWydvJ10sXG5cdFx0Ly9kZW1hbmRPcHRpb246IHRydWUsXG5cdFx0cmVxdWlyZXNBcmc6IHRydWUsXG5cdFx0bm9ybWFsaXplOiB0cnVlLFxuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdGRlc2M6ICcgb3V0cHV0IHBhdGgnLFxuXHRcdGRlZmF1bHQ6IGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIENXRDtcblx0XHR9LFxuXHR9KVxuXHQub3B0aW9uKCd0cGwnLCB7XG5cdFx0YWxpYXM6IFsndCddLFxuXHRcdHJlcXVpcmVzQXJnOiB0cnVlLFxuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdGRlc2M6ICdlcHViIHRwbCcsXG5cdH0pXG5cdC5vcHRpb24oJ2ZpbGVuYW1lJywge1xuXHRcdGFsaWFzOiBbJ2YnXSxcblx0XHRyZXF1aXJlc0FyZzogdHJ1ZSxcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRkZXNjOiAnZmlsZW5hbWUnLFxuXHR9KVxuXHQub3B0aW9uKCd1c2VUaXRsZScsIHtcblx0XHRyZXF1aXJlc0FyZzogdHJ1ZSxcblx0XHRkZWZhdWx0OiB0cnVlLFxuXHR9KVxuXHQub3B0aW9uKCdmaWxlbmFtZUxvY2FsJywge1xuXHRcdHJlcXVpcmVzQXJnOiB0cnVlLFxuXHRcdGRlc2M6ICd0cnkgYXV0byBjaG9vc2UgZmlsZW5hbWUnLFxuXHRcdGRlZmF1bHQ6IHRydWUsXG5cdH0pXG5cdC5vcHRpb24oJ2RhdGUnLCB7XG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0XHRhbGlhczogWydkJ10sXG5cdFx0ZGVzYzogJ2FkZCBjdXJyZW50IGRhdGUgZW5kIG9mIGZpbGVuYW1lJyxcblx0fSlcblx0Lm9wdGlvbignbGFuZycsIHtcblx0XHRhbGlhczogWydsJ10sXG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0ZGVzYzogJ2VwdWIgbGFuZycsXG5cdH0pXG5cdC8vIEB0cy1pZ25vcmVcblx0LmNvbW1hbmQoJyQwJywgJycsIGZ1bmN0aW9uICh5YXJncylcblx0e1xuXHRcdGxldCBpbnB1dFBhdGggPSB5YXJncy5hcmd2LmlucHV0IHx8IHlhcmdzLmFyZ3YuX1swXSB8fCBDV0Q7XG5cdFx0bGV0IG91dHB1dFBhdGggPSB5YXJncy5hcmd2Lm91dHB1dDtcblxuXHRcdGlmICghcGF0aC5pc0Fic29sdXRlKGlucHV0UGF0aCkpXG5cdFx0e1xuXHRcdFx0aW5wdXRQYXRoID0gcGF0aC5qb2luKENXRCwgaW5wdXRQYXRoKTtcblx0XHR9XG5cblx0XHRpZiAoIXBhdGguaXNBYnNvbHV0ZShvdXRwdXRQYXRoKSlcblx0XHR7XG5cdFx0XHRvdXRwdXRQYXRoID0gcGF0aC5qb2luKENXRCwgb3V0cHV0UGF0aCk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5ncmV5KGBjdXJyZW50UGF0aDpcXG4gIGAsIGlucHV0UGF0aCk7XG5cdFx0Y29uc29sZS5ncmV5KGBpbnB1dFBhdGg6XFxuICBgLCBpbnB1dFBhdGgpO1xuXHRcdGNvbnNvbGUuZ3JleShgb3V0cHV0UGF0aDpcXG4gIGAsIG91dHB1dFBhdGgpO1xuXG5cdFx0aWYgKGlucHV0UGF0aC5pbmRleE9mKF9fZGlybmFtZSkgPT0gMCB8fCBvdXRwdXRQYXRoLmluZGV4T2YoX19kaXJuYW1lKSA9PSAwKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYFtGQUlMXSBwYXRoIG5vdCBhbGxvd2ApO1xuXG5cdFx0XHR5YXJncy5zaG93SGVscCgpO1xuXG5cdFx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zb2xlLmxvZyhgXFxuYCk7XG5cblx0XHQvL2NvbnNvbGUubG9nKDY2NiwgeWFyZ3MuYXJndik7XG5cblx0XHRyZXR1cm4gbm92ZWxFcHViKHtcblx0XHRcdGlucHV0UGF0aCxcblx0XHRcdG91dHB1dFBhdGgsXG5cdFx0XHRmaWxlbmFtZTogeWFyZ3MuYXJndi5maWxlbmFtZSB8fCBudWxsLFxuXHRcdFx0dXNlVGl0bGU6IHlhcmdzLmFyZ3YudXNlVGl0bGUsXG5cdFx0XHRmaWxlbmFtZUxvY2FsOiB5YXJncy5hcmd2LmZpbGVuYW1lTG9jYWwsXG5cdFx0XHRlcHViTGFuZ3VhZ2U6IHlhcmdzLmFyZ3YubGFuZyxcblx0XHRcdGVwdWJUZW1wbGF0ZTogeWFyZ3MuYXJndi50cGwsXG5cdFx0XHRwYWRFbmREYXRlOiB5YXJncy5hcmd2LmRhdGUsXG5cdFx0fSk7XG5cblx0XHQvL3lhcmdzLnNob3dIZWxwKCdsb2cnKTtcblx0fSlcblx0LnZlcnNpb24oKVxuXHQvLy5oZWxwKClcblx0LmFyZ3ZcbjtcbiJdfQ==